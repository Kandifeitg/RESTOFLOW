```js
owner_id INTEGER, plan TEXT, start_at TEXT, end_at TEXT, status TEXT,
FOREIGN KEY(owner_id) REFERENCES owners(id)
)`);


db.run(`CREATE TABLE IF NOT EXISTS restaurants (
id INTEGER PRIMARY KEY AUTOINCREMENT,
owner_id INTEGER, name TEXT, slug TEXT UNIQUE, logo TEXT,
cinetpay_api_key TEXT, cinetpay_site_id TEXT,
FOREIGN KEY(owner_id) REFERENCES owners(id)
)`);


db.run(`CREATE TABLE IF NOT EXISTS employees (
id INTEGER PRIMARY KEY AUTOINCREMENT,
restaurant_id INTEGER, fullname TEXT, role TEXT, login TEXT, pass TEXT,
FOREIGN KEY(restaurant_id) REFERENCES restaurants(id)
)`);


db.run(`CREATE TABLE IF NOT EXISTS menu_items (
id INTEGER PRIMARY KEY AUTOINCREMENT,
restaurant_id INTEGER, title TEXT, description TEXT, image TEXT,
price_normal INTEGER, price_promo INTEGER, active INTEGER DEFAULT 1,
FOREIGN KEY(restaurant_id) REFERENCES restaurants(id)
)`);


db.run(`CREATE TABLE IF NOT EXISTS orders (
id INTEGER PRIMARY KEY AUTOINCREMENT,
restaurant_id INTEGER, table_no TEXT, customer_name TEXT, customer_phone TEXT,
channel TEXT, status TEXT, total INTEGER, created_at TEXT,
FOREIGN KEY(restaurant_id) REFERENCES restaurants(id)
)`);


db.run(`CREATE TABLE IF NOT EXISTS order_items (
id INTEGER PRIMARY KEY AUTOINCREMENT,
order_id INTEGER, item_title TEXT, qty INTEGER, unit_price INTEGER, line_total INTEGER,
FOREIGN KEY(order_id) REFERENCES orders(id)
)`);


db.run(`CREATE TABLE IF NOT EXISTS payments (
id INTEGER PRIMARY KEY AUTOINCREMENT,
order_id INTEGER, provider TEXT, method TEXT, amount INTEGER, status TEXT,
tx_ref TEXT, tx_id TEXT, paid_at TEXT, receipt_path TEXT,
FOREIGN KEY(order_id) REFERENCES orders(id)
)`);


db.run(`CREATE TABLE IF NOT EXISTS customers (
id INTEGER PRIMARY KEY AUTOINCREMENT,
restaurant_id INTEGER, name TEXT, email TEXT, whatsapp TEXT,
last_order_at TEXT, tags TEXT,
FOREIGN KEY(restaurant_id) REFERENCES restaurants(id)
)`);
});


module.exports = db;
```
